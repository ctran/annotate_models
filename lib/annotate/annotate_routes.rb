# == Annotate Routes
#
# Based on:
#
#
#
# Prepends the output of "rake routes" to the top of your routes.rb file.
# Yes, it's simple but I'm thick and often need a reminder of what my routes
# mean.
#
# Running this task will replace any exising route comment generated by the
# task. Best to back up your routes file before running:
#
# Author:
#  Gavin Montague
#  gavin@leftbrained.co.uk
#
# Released under the same license as Ruby. No Support. No Warranty.
#

require_relative './annotate_routes/header_rows'
require_relative './annotate_routes/annotation_processor'
require_relative './annotate_routes/remove_processor'

# AnnotateRoutes provides methods to annotate 'config/routes.rb'
module AnnotateRoutes
  MAGIC_COMMENT_MATCHER = Regexp.new(/(^#\s*encoding:.*)|(^# coding:.*)|(^# -\*- coding:.*)|(^# -\*- encoding\s?:.*)|(^#\s*frozen_string_literal:.+)|(^# -\*- frozen_string_literal\s*:.+-\*-)/).freeze

  class << self
    # @param options [Hash] options
    # @return [Boolean]
    def do_annotations(options = {})
      return unless routes_exists?
      result = AnnotationProcessor.process(routes_file, options)

      if result
        puts "#{routes_file} annotated."
      else
        puts "#{routes_file} unchanged."
      end

      result
    end

    # @param _options [Hash] options (not used)
    # @return [Boolean]
    def remove_annotations(_options = {})
      return unless routes_exists?
      result = RemoveProcessor.process(routes_file)

      if result
        puts "Removed annotations from #{routes_file}."
      else
        puts "#{routes_file} unchanged."
      end

      result
    end

    # @return [String] path for routes_file
    def routes_file
      @routes_file ||= File.join('config', 'routes.rb')
    end

    # @param [Array<String>] array
    # @return [Array<String>] all found magic comments
    # @return [Array<String>] content without magic comments
    def extract_magic_comments(array)
      magic_comments = []
      new_content = []

      array.map do |row|
        if row =~ MAGIC_COMMENT_MATCHER
          magic_comments << row.strip
        else
          new_content << row
        end
      end

      [magic_comments, new_content]
    end

    private

    # @return [Boolean] whether 'routes_file' exists or not
    def routes_exists?
      routes_exists = File.exists?(routes_file)
      puts "Can't find routes.rb" unless routes_exists

      routes_exists
    end
  end
end
